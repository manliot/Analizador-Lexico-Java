
%{
   #include <stdio.h>
   int yylinea;
   int err;
   #define IF          1;
   #define ELSE        2; 
   #define FOR         3;
   #define WHILE       4;
   #define DOUBLE      5;
   #define INT         6;
   #define STRING      7;
   #define NEW         8;
   #define PUBLIC      9;
   #define CLASS      10;
   #define STATIC     11;
   #define VOID       12;
   #define OP_MULT    13;
   #define OP_SUM     14;
   #define OP_SUST    15;
   #define OP_DIV     16;
   #define OP_ASIG    17;
   #define OP_MOD     18;
   #define PLUSPLUS   19;
   #define MENMEN     20;
   #define MASIGUA    21;
   #define MENOSIGUA  22;
   #define PORIGUA    23;
   #define DIVIGUA    24;
   #define LLAVE_A    25;
   #define LLAVE_C    26;
   #define PUNTOYCOM  27;
   #define PARENT_A   28;
   #define PARENT_C   29;
   #define CORCHET_A  30;
   #define CORCHET_C  31;
   #define CTE_ENT    32;
   #define CTE_REAL   33;
   #define CTE_CAD    34;
   #define ID         35;
   #define OP_IGUAL   36;
   #define OP_MENIGUA 37;
   #define OP_MAYIGUA 38;
   #define DIFERENTE  39;
   #define MAYOR      40;
   #define MENOR      41;
   #define OP_Y       42;
   #define OP_O       43;
   #define OP_NO      44;
%}
digito [0-9]
letra [a-zA-Z]

%%

"if"      return IF;
"else"    return ELSE
"for"     return FOR;
"while"   return WHILE;
"double"  return DOUBLE;
"int"     return INT;
"String"  return STRING;
"new"     return NEW;
"public"  return PUBLIC;
"class"   return CLASS;
"static"  return STATIC;
"void"    return VOID
"*"       return OP_MULT;
"+"       return OP_SUM
"-"       return OP_SUST;
"/"       return OP_DIV
"="       return OP_ASIG;
"%"       return OP_MOD
"++"      return PLUSPLUS;
"--"      return MENMEN
"+="      return MASIGUA;
"-="      return MENOSIGUA;
"*="      return PORIGUA;
"/="      return DIVIGUA;
"{"		 return LLAVE_A;
"}"		 return LLAVE_C;
";"		 return PUNTOYCOM;
"("		 return PARENT_A;
")"		 return PARENT_C;
"["		 return CORCHET_A;
"]"		 return CORCHET_C;
"-"?({digito})+                       return CTE_ENT
"-"?({digito})+"."({digito})+(e([-|+])[1-9]+)?         return CTE_REAL
("\"")([^\n\"]*([.])*)*("\"")                 return CTE_CAD
({letra}|"_")({letra}|{digito}|"_")*  return ID
"=="		 return OP_IGUAL;
"<="		 return OP_MENIGUA;
">="		 return OP_MAYIGUA;
"<>"		 return DIFERENTE;
">"		 return MAYOR;
"<"		 return MENOR;
"!="		 return DIFERENTE;
"&&"		 return OP_Y;
"||"		 return OP_O;
"!"		 return OP_NO;
\n    yylinea++;
\t    ;
[ ]   ;
.     err++;
%%
int main(){
   int token;
   token = yylex();
   while(token){
           printf("Line: %d\tToken Type: %d \tLexema: %s \n" , yylinea, token, yytext);
           token = yylex();

   }
   printf("ERROR TOKENS: %d ...\n", err);
   return 0;
}
x
